<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项（MBG：MybatisGenerator的缩写）
        resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
        url：配置资源加载地址，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
    注意：两个属性只能选一个！另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用 -->
    <!--<properties resource="" url="" />-->

    <!-- 在MBG工作的时候，需要额外加载的依赖包：location属性指明加载jar/zip包的全路径。此处加载数据库驱动 -->
    <classPathEntry location="C:\Users\LewisZhang\.m2\repository\mysql\mysql-connector-java\5.1.46\mysql-connector-java-5.1.46.jar"/>

    <!-- 生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG -->
    <!--<context id="TMSpiderTables" targetRuntime="MyBatis3Simple">
        &lt;!&ndash; 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 &ndash;&gt;
        &lt;!&ndash;<property name="autoDelimitKeywords" value="false"/>&ndash;&gt;

        &lt;!&ndash; 生成的Java文件的编码 &ndash;&gt;
        &lt;!&ndash;<property name="javaFileEncoding" value="UTF-8"/>&ndash;&gt;

        &lt;!&ndash; 格式化java代码 &ndash;&gt;
        &lt;!&ndash;<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>&ndash;&gt;

        &lt;!&ndash; 格式化XML代码 &ndash;&gt;
        &lt;!&ndash;<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>&ndash;&gt;

        &lt;!&ndash; beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号 &ndash;&gt;
        &lt;!&ndash;<property name="beginningDelimiter" value="`"/>&ndash;&gt;
        &lt;!&ndash;<property name="endingDelimiter" value="`"/>&ndash;&gt;

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            &lt;!&ndash; 是否去除自动生成的注释 &ndash;&gt;
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        &lt;!&ndash; 数据库链接URL，用户名、密码（必要） &ndash;&gt;
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://127.0.0.1:3306/tmspider" userId="root" password="root">
            &lt;!&ndash; 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 &ndash;&gt;
            &lt;!&ndash;<property name="" value=""/>&ndash;&gt;
        </jdbcConnection>

        &lt;!&ndash; Java类型处理器，用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl。
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型 &ndash;&gt;
        &lt;!&ndash;<javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">&ndash;&gt;
        <javaTypeResolver>
            &lt;!&ndash; forceBigDecimals：
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short &ndash;&gt;
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        &lt;!&ndash; Java模型创建器，是必须要的元素。负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 &ndash;&gt;
        <javaModelGenerator targetPackage="com.azureip.tmspider.model" targetProject="src/main/java">
            &lt;!&ndash; for MyBatis3/MyBatis3Simple
            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field，而不是使用setter &ndash;&gt;
            <property name="constructorBased" value="false"/>

            &lt;!&ndash; 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false &ndash;&gt;
            <property name="enableSubPackages" value="true"/>

            &lt;!&ndash; for MyBatis3 / MyBatis3Simple
            是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 &ndash;&gt;
            &lt;!&ndash;<property name="immutable" value="false"/>&ndash;&gt;

            &lt;!&ndash; 设置一个根对象。如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在table的rootClass属性中可以覆盖该选项
            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
                1，属性名相同，类型相同，有相同的getter/setter方法 &ndash;&gt;
            &lt;!&ndash;<property name="rootClass" value="com.azureip.tmspider.model.BaseDomain"/>&ndash;&gt;

            &lt;!&ndash; 设置是否在getter方法中，对String类型字段调用trim()方法 &ndash;&gt;
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        &lt;!&ndash; 生成SQL Map映射的XML文件生成器。
        注意：在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
        或者只使用Mapper接口+Annotation，所以，如果javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
        targetPackage/targetProject:同javaModelGenerator &ndash;&gt;
        <sqlMapGenerator targetPackage="com.azureip.tmspider.mapper" targetProject="src/main/resources">
            &lt;!&ndash; 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false &ndash;&gt;
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        &lt;!&ndash; 对于Mybatis来说，即生成Mapper接口。注意：如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意：如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER &ndash;&gt;
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.azureip.tmspider.mapper" targetProject="src/main/java">
            &lt;!&ndash; 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false &ndash;&gt;
            <property name="enableSubPackages" value="true"/>

            &lt;!&ndash; 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 &ndash;&gt;
            &lt;!&ndash;<property name="rootInterface" value=""/>&ndash;&gt;
        </javaClientGenerator>

        &lt;!&ndash; 要生成的表tableName是数据库中的表名或视图名 domainObjectName是实体类名&ndash;&gt;
        &lt;!&ndash; 要生成相关文件的表。可以有一个或多个table，必须要有table元素
        配置的table会生成如下文件：
            1，SQL map文件；
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample）（可选）；
            6，Mapper接口（可选）。
        tableName（必要）：要生成对象的表名。
        注意：大小写敏感。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会根据设置的schema，catalog
        或tablename去查询数据表，按照下面的流程：
            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
            4，否则，使用指定的大小写格式查询；
        另外，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名。
        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式。
        可选属性：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字
                可以设置为abc.domainName，那么会自动把domainName类再放到abc包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，
                使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
        注意：table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写 &ndash;&gt;

        &lt;!&ndash;公告数据表&ndash;&gt;
        &lt;!&ndash;<table tableName="announcement" domainObjectName="Announcement" enableCountByExample="false"&ndash;&gt;
        &lt;!&ndash;enableUpdateByExample="false"&ndash;&gt;
        &lt;!&ndash;enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">&ndash;&gt;

        &lt;!&ndash; 参考 javaModelGenerator的constructorBased属性 &ndash;&gt;
        &lt;!&ndash;<property name="constructorBased" value="false"/>&ndash;&gt;

        &lt;!&ndash; 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema &ndash;&gt;
        &lt;!&ndash;<property name="ignoreQualifiersAtRuntime" value="false"/>&ndash;&gt;

        &lt;!&ndash; 参考javaModelGenerator的immutable属性 &ndash;&gt;
        &lt;!&ndash;<property name="immutable" value="false"/>&ndash;&gt;

        &lt;!&ndash; 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 &ndash;&gt;
        &lt;!&ndash;<property name="modelOnly" value="false"/>&ndash;&gt;

        &lt;!&ndash; 参考 javaModelGenerator的rootClass 属性 &ndash;&gt;
        &lt;!&ndash;<property name="rootClass" value=""/>&ndash;&gt;

        &lt;!&ndash; 参考javaClientGenerator的rootInterface 属性 &ndash;&gt;
        &lt;!&ndash;<property name="rootInterface" value=""/>&ndash;&gt;

        &lt;!&ndash; 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog &ndash;&gt;
        &lt;!&ndash;<property name="runtimeCatalog" value=""/>&ndash;&gt;

        &lt;!&ndash; 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema &ndash;&gt;
        &lt;!&ndash;<property name="runtimeSchema" value=""/>&ndash;&gt;

        &lt;!&ndash; 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename &ndash;&gt;
        &lt;!&ndash;<property name="runtimeTableName" value=""/>&ndash;&gt;

        &lt;!&ndash; 注意：该属性只针对MyBatis3Simple有用。
        如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件 &ndash;&gt;
        &lt;!&ndash;<property name="selectAllOrderByClause" value="age desc,username asc"/>&ndash;&gt;

        &lt;!&ndash; 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate &ndash;&gt;
        &lt;!&ndash;<property name="useActualColumnNames" value="true"/>&ndash;&gt;

        &lt;!&ndash; generatedKey用于生成生成主键的方法，如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素（可选）
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
                Cloudscape：相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2：相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF：相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby：相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                HSQLDB：相当于selectKey的SQL为：CALL IDENTITY()
                Informix：相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                MySql：相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                SqlServer：相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                SYBASE：相当于selectKey的SQL为：SELECT @@IDENTITY
                JDBC：相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性 &ndash;&gt;
        &lt;!&ndash;<generatedKey column="" sqlStatement=""/>&ndash;&gt;

        &lt;!&ndash; 该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
        比如列名为：CUST_ID、CUST_NAME、CUST_EMAIL、CUST_ADDRESS等，那么就可以设置searchString为"^CUST_"，并使用空白替换，
        那么生成的Customer对象中的属性名称就不是custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；
        注意：MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，如果使用了columnOverride元素，该属性无效 &ndash;&gt;
        &lt;!&ndash;<columnRenamingRule searchString="" replaceString=""/>&ndash;&gt;

        &lt;!&ndash; 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性。
            column:要重新设置的列名；
        注意：一个table元素中可以有多个columnOverride元素 &ndash;&gt;
        &lt;!&ndash;<columnOverride column="username">&ndash;&gt;
        &lt;!&ndash; 使用property属性来指定列要生成的属性名称 &ndash;&gt;
        &lt;!&ndash;<property name="property" value="userName"/>&ndash;&gt;

        &lt;!&ndash; javaType用于指定生成的domain的属性类型，使用类型的全限定名 &ndash;&gt;
        &lt;!&ndash;<property name="javaType" value=""/>&ndash;&gt;

        &lt;!&ndash; jdbcType用于指定该列的JDBC类型 &ndash;&gt;
        &lt;!&ndash;<property name="jdbcType" value=""/>&ndash;&gt;

        &lt;!&ndash; typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
        注意：Mybatis中，不会生成到mybatis-config.xml中的typeHandler，只会生成类似：
            where id = #{id,jdbcType=BIGINT,typeHandler=com.azureip.mybatis.MyTypeHandler}
        的参数描述 &ndash;&gt;
        &lt;!&ndash;<property name="jdbcType" value=""/>&ndash;&gt;

        &lt;!&ndash; 参考table元素的delimitAllColumns配置，默认为false &ndash;&gt;
        &lt;!&ndash;<property name="delimitedColumnName" value=""/>&ndash;&gt;
        &lt;!&ndash;</columnOverride>&ndash;&gt;

        &lt;!&ndash; ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
            column:指定要忽略的列的名字；
            delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false
        注意：一个table元素中可以有多个ignoreColumn元素 &ndash;&gt;
        &lt;!&ndash;<ignoreColumn column="deptId" delimitedColumnName=""/>&ndash;&gt;
        &lt;!&ndash;</table>&ndash;&gt;
        &lt;!&ndash;表格处理记录表&ndash;&gt;
        &lt;!&ndash;<table tableName="excel_opt_record" domainObjectName="ExcelOptRecord"
               enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
        </table>&ndash;&gt;
        &lt;!&ndash;标库网商标信息表&ndash;&gt;
        &lt;!&ndash;<table tableName="tmkoo_record" domainObjectName="TMKooRecord"
               enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
        </table>&ndash;&gt;
        &lt;!&ndash;商标注册申请信息表&ndash;&gt;
        &lt;!&ndash;<table tableName="registration" domainObjectName="Registration"
               enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
        </table>&ndash;&gt;

    </context>-->

    <context id="IPSpiderTables" defaultModelType="flat" targetRuntime="MyBatis3Simple">
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://127.0.0.1:3306/tmspider" userId="root" password="root"/>
        <javaModelGenerator targetPackage="com.azureip.ipspider.model" targetProject="src/main/java"/>
        <sqlMapGenerator targetPackage="com.azureip.ipspider.mapper" targetProject="src/main/resources"/>
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.azureip.ipspider.mapper" targetProject="src/main/java">
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--代表IP表-->
        <table tableName="pip_proxy_ip" domainObjectName="ProxyIP">
            <property name="useActualColumnNames" value="false"/>
        </table>
    </context>

</generatorConfiguration>
